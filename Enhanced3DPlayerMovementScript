using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    public CharacterController controller;
    public Animator animator; // Reference to the Animator component

    // Movement Speeds
    public float walkSpeed = 6f;
    public float runSpeed = 12f;

    public float gravity = -9.81f;
    public float jumpHeight = 3f;

    public Transform groundCheck;
    public float groundDistance = 0.4f;
    public LayerMask groundMask;

    private Vector3 velocity;
    private bool isGrounded;


    //camera stuff
    public float lookXLimit = 45f;
    public float cameraSensitivity = 100f;
    public float cameraDistance = 5f;
    public float minCameraDistance = 2f;
    public float maxCameraDistance = 10f;
    public float zoomSpeed = 5f;
    public bool canZoom = true;
    private bool isZoomLocked = false;
    private float previousCameraDistance;
    private float rotationX = 0;
    public Transform cameraFollowTarget;
    public Camera playerCamera;

    private void Start()
    {
        InitializeCursor();
    }

    void Update()
    {
        GroundCheck();
        MoveCharacter();
        HandleJumpAndGravity();

        // New camera control calls
        HandleCameraControl();
        if (isZoomLocked)
        {
            LockCameraZoom();
        }
    }

    void GroundCheck()
    {
        isGrounded = Physics.CheckSphere(groundCheck.position, groundDistance, groundMask);

        if (isGrounded && velocity.y < 0)
        {
            velocity.y = -2f;
            animator.SetBool("IsFalling", false);
            animator.SetBool("IsLanding", true);
        }
        else
        {
            animator.SetBool("IsLanding", false);
        }
    }

    private void InitializeCursor()
    {
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    void MoveCharacter()
    {
        float x = Input.GetAxis("Horizontal");
        float z = Input.GetAxis("Vertical");

        bool isRunning = Input.GetKey(KeyCode.LeftShift);
        float currentSpeed = isRunning ? runSpeed : walkSpeed; // Set speed based on running

        Vector3 move = transform.right * x + transform.forward * z;
        controller.Move(move * currentSpeed * Time.deltaTime);

        bool isMoving = move.magnitude > 0.1f; // Adjust the threshold based on your game's specifics
        animator.SetBool("IsMoving", isMoving);

        // Update Animator parameters
        animator.SetFloat("Horizontal", x);
        animator.SetFloat("Vertical", z);
        animator.SetFloat("Velocity", controller.velocity.magnitude);
    }

    void HandleJumpAndGravity()
    {
        if (Input.GetButtonDown("Jump") && isGrounded)
        {
            velocity.y = Mathf.Sqrt(jumpHeight * -2f * gravity);
            animator.SetBool("IsJumping", true);
        }
        else if (!isGrounded)
        {
            animator.SetBool("IsJumping", false);
            animator.SetBool("IsFalling", true);
        }

        velocity.y += gravity * Time.deltaTime;
        controller.Move(velocity * Time.deltaTime);
    }

    private void LockCameraZoom()
    {
        Vector3 cameraPosition = cameraFollowTarget.position - cameraFollowTarget.forward * minCameraDistance;
        playerCamera.transform.position = cameraPosition;
        playerCamera.transform.LookAt(cameraFollowTarget.position);
    }

    private void HandleCameraControl()
    {
        rotationX -= Input.GetAxis("Mouse Y") * cameraSensitivity * Time.deltaTime;
        rotationX = Mathf.Clamp(rotationX, -lookXLimit, lookXLimit);
        cameraFollowTarget.localRotation = Quaternion.Euler(rotationX, 0f, 0f);

        transform.Rotate(0, Input.GetAxis("Mouse X") * cameraSensitivity * Time.deltaTime, 0);

        if (canZoom && !isZoomLocked)
        {
            cameraDistance -= Input.GetAxis("Mouse ScrollWheel") * zoomSpeed;
        cameraDistance = Mathf.Clamp(cameraDistance, minCameraDistance, maxCameraDistance);
    }

    Vector3 cameraPosition = cameraFollowTarget.position - cameraFollowTarget.forward * cameraDistance;
    playerCamera.transform.position = cameraPosition;
    playerCamera.transform.LookAt(cameraFollowTarget.position);
}
}

